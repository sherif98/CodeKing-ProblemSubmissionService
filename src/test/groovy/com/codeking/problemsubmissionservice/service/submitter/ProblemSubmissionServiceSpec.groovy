package com.codeking.problemsubmissionservice.service.submitter

import com.codeking.problemsubmissionservice.domain.SubmissionStatus
import com.codeking.problemsubmissionservice.exception.ProblemNotFoundException
import com.codeking.problemsubmissionservice.service.compiler.api.CompilationService
import com.codeking.problemsubmissionservice.service.compiler.dto.CompilationResult
import com.codeking.problemsubmissionservice.service.compiler.dto.CompilationStatus
import com.codeking.problemsubmissionservice.service.evaluator.api.ProblemEvaluationService
import com.codeking.problemsubmissionservice.service.evaluator.dto.ProblemEvaluationResult
import com.codeking.problemsubmissionservice.service.evaluator.dto.ProblemEvaluationStatus
import com.codeking.problemsubmissionservice.service.submitter.dto.ProblemSubmissionRequest
import com.codeking.problemsubmissionservice.service.submitter.impl.ProblemSubmissionServiceImpl
import spock.lang.Specification
import spock.lang.Subject

@Subject(ProblemSubmissionServiceImpl)
class ProblemSubmissionServiceSpec extends Specification {


    def "should return accepted and no error available when all tests pass with no errors and time limit"() {
        given: "stubbed services"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_SUCCESS)
                .build()
        def evaluationService = Stub(ProblemEvaluationService)
        evaluationService.evaluateProblem(_) >> ProblemEvaluationResult.builder()
                .problemEvaluationStatus(ProblemEvaluationStatus.ACCEPTED)
                .executorErrorOutput("")
                .build()
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        def result = submissionService.submitProblem(request)
        then:
        result.submissionStatus == SubmissionStatus.ACCEPTED
        result.submissionError.isEmpty()
    }

    def "should return compilation error and compiler error output when fail to compile program"() {
        given: "stubbed services"
        def compilerGeneratedError = "error generated by compiler"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_ERROR)
                .compilerErrorOutput(compilerGeneratedError)
                .build()
        def evaluationService = Stub(ProblemEvaluationService)
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        def result = submissionService.submitProblem(request)
        then:
        result.submissionStatus == SubmissionStatus.COMPILATION_ERROR
        result.submissionError == compilerGeneratedError
    }


    def "should return compilation error and compiler error and no call to evaluation service are made when fail to compile program"() {
        given: "stubbed services"
        def compilerGeneratedError = "error generated by compiler"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_ERROR)
                .compilerErrorOutput(compilerGeneratedError)
                .build()
        def evaluationService = Mock(ProblemEvaluationService)
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        def result = submissionService.submitProblem(request)
        then:
        result.submissionStatus == SubmissionStatus.COMPILATION_ERROR
        result.submissionError == compilerGeneratedError
        0 * evaluationService.evaluateProblem(_)
    }

    def "should return time limit exceeded when one of the tests exceeds the time limit"() {
        given: "stubbed services"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_SUCCESS)
                .build()
        def evaluationService = Stub(ProblemEvaluationService)
        evaluationService.evaluateProblem(_) >> ProblemEvaluationResult.builder()
                .problemEvaluationStatus(ProblemEvaluationStatus.TIME_LIMIT_EXCEEDED)
                .executorErrorOutput("")
                .build()
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        def result = submissionService.submitProblem(request)
        then:
        result.submissionStatus == SubmissionStatus.TIME_LIMIT_EXCEEDED
        result.submissionError.isEmpty()
    }

    def "should return run time error and exector error when a problem occurs in running one of the tests"() {
        given: "stubbed services"
        def executorError = "error happened while running"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_SUCCESS)
                .build()
        def evaluationService = Stub(ProblemEvaluationService)
        evaluationService.evaluateProblem(_) >> ProblemEvaluationResult.builder()
                .problemEvaluationStatus(ProblemEvaluationStatus.RUNTIME_ERROR)
                .executorErrorOutput(executorError)
                .build()
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        def result = submissionService.submitProblem(request)
        then:
        result.submissionStatus == SubmissionStatus.RUNTIME_ERROR
        result.submissionError == executorError
    }


    def "should throw problem not found exception when problem is not found"() {
        given: "stubbed services"
        def compilationService = Stub(CompilationService)
        compilationService.compile(_) >> CompilationResult.builder()
                .compilationStatus(CompilationStatus.COMPILATION_SUCCESS)
                .build()
        def evaluationService = Stub(ProblemEvaluationService)
        def invalidProblemId = "123"
        evaluationService.evaluateProblem(_) >> {
            throw new ProblemNotFoundException(invalidProblemId)
        }
        and: "submission service"
        def submissionService = new ProblemSubmissionServiceImpl(compilationService, evaluationService)
        and: "request"
        def request = ProblemSubmissionRequest.builder().build()
        when:
        submissionService.submitProblem(request)
        then:
        thrown(ProblemNotFoundException)
    }
}
